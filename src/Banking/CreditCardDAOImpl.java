package Banking;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by tsytrin on 08.01.2017.
 */

public class CreditCardDAOImpl implements ICreditCardDAO {

    private static final String DELETE = "DELETE FROM CreditCard WHERE CreditCard_ID=?";
    private static final String FIND_ALL = "SELECT * FROM CreditCard ORDER BY CreditCard_ID";
    private static final String FIND_BY_ID = "SELECT * FROM CreditCard WHERE CreditCard_ID=?";
    private static final String INSERT = "INSERT INTO CreditCard(Cash_amount, Acc_User_ID) VALUES(?, ?)";
    private static final String UPDATE = "UPDATE CreditCard SET Cash_amount=?, Acc_User_ID=? WHERE CreditCard_ID=?";

    private Connection connection = null;

    public int delete(int creditCardID) {
        PreparedStatement stmt = null;
        try {
            if (connection == null || !connection.isValid(1)) {
                connection = ConnectionManager.getConnection();
            }
            stmt = connection.prepareStatement(DELETE);
            stmt.setInt(1, creditCardID);
            return stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;
    }

    public CreditCard get(int creditCardID) {
        PreparedStatement stmt = null;
        try {
            if (connection == null || !connection.isValid(1)) {
                connection = ConnectionManager.getConnection();
            }
            stmt = connection.prepareStatement(FIND_BY_ID);
            stmt.setInt(1, creditCardID);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                CreditCard creditCard = new CreditCard(rs.getInt("CreditCard_ID"), rs.getBigDecimal("Cash_amount"),
                        rs.getInt("Acc_User_ID"));
                return creditCard;
            } else {
                return null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    public int update(CreditCard creditCard) {
        PreparedStatement stmt = null;
        try {
            if (connection == null || !connection.isValid(1)) {
                connection = ConnectionManager.getConnection();
            }
            stmt = connection.prepareStatement(UPDATE);
            stmt.setBigDecimal(1, creditCard.getCashAmount());
            stmt.setInt(2, creditCard.getUserID());
            stmt.setInt(3, creditCard.getCreditCardID());
            return stmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;
    }

    public int insert(CreditCard creditCard) {

        PreparedStatement stmt = null;
        try {
            if (connection == null || !connection.isValid(1)) {
                connection = ConnectionManager.getConnection();
            }
            stmt = connection.prepareStatement(INSERT, Statement.RETURN_GENERATED_KEYS);
            stmt.setBigDecimal(1, creditCard.getCashAmount());
            stmt.setInt(2, creditCard.getUserID());
            stmt.executeUpdate();
            ResultSet tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            return autoGeneratedID;

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;
    }

    public List<CreditCard> getAll() {
        PreparedStatement stmt = null;
        List<CreditCard> list = new ArrayList<>();

        try {
            if (connection == null || !connection.isValid(1)) {
                connection = ConnectionManager.getConnection();
            }
            stmt = connection.prepareStatement(FIND_ALL);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                CreditCard creditCard = new CreditCard(rs.getInt("CreditCard_ID"), rs.getBigDecimal("CreditCard_ID"),
                        rs.getInt("Acc_User_ID"));
                list.add(creditCard);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return list;
    }

}


